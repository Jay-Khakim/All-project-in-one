<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use common\models\BannersTranslate;
use common\models\Lang;
use Yii;

/**
 * This is the base-model class for table "banners".
 *
 * @property integer $id
 * @property string $image
 * @property integer $status
 * @property string $title
 * @property integer $product_id
 *
 * @property \common\models\BannerPagePosition[] $bannerPagePositions
 * @property \common\models\Product $product
 * @property string $aliasModel
 */
abstract class Banners extends \yii\db\ActiveRecord
{


    public $title;
    public $rasm;

    const PAGE_HOME = 1;
    const PAGE_ALL_PRODUCTS = 2;
    const PAGE_PRODUCT_VIEW = 3;
    const PAGE_SELECT_CATEGORY = 4;
    const PAGE_COMPANY = 5;
    const PAGE_COMPANY_VIEW = 6;
    const PAGE_SERVICE = 7;
    const PAGE_SERVICE_VIEW = 8;
    const PAGE_ALL_PAGE = 20;

    const POSITION_ONE = 1;
    const POSITION_TWO = 2;
    const POSITION_THREE = 3;
    const POSITION_FOUR = 4;
    const POSITION_FIVE = 5;
    const POSITION_SIX = 6;
    const POSITION_SEVEN = 7;
    const POSITION_EIGHT = 8;
    const POSITION_NIGHN = 9;
    const POSITION_TEN = 10;
    const POSITION_FOOTER = 20;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'banners';
    }


    public function getPages(){
        return [
            self::PAGE_ALL_PAGE => 'ALL PAGE',
            self::PAGE_HOME => 'Home',
            self::PAGE_ALL_PRODUCTS => 'All products',
            self::PAGE_PRODUCT_VIEW => 'Product view',
            self::PAGE_SELECT_CATEGORY => 'Select category',
            self::PAGE_COMPANY => 'Company',
            self::PAGE_COMPANY_VIEW => 'Company view',
            self::PAGE_SERVICE => 'Service',
            self::PAGE_SERVICE_VIEW => 'Service view',
        ];
    }

    public function getPageName($param){
        $array = [
            self::PAGE_ALL_PAGE => 'ALL PAGE',
            self::PAGE_HOME => 'Home',
            self::PAGE_ALL_PRODUCTS => 'All products',
            self::PAGE_PRODUCT_VIEW => 'Product view',
            self::PAGE_SELECT_CATEGORY => 'Select category',
            self::PAGE_COMPANY => 'Company',
            self::PAGE_COMPANY_VIEW => 'Company view',
            self::PAGE_SERVICE => 'Service',
            self::PAGE_SERVICE_VIEW => 'Service view',
        ];

        return $array[$param];
    }

    public function getPositions(){
        return [
            self::POSITION_FOOTER => 'FOOTER',
            self::POSITION_ONE => self::POSITION_ONE,
            self::POSITION_TWO => self::POSITION_TWO,
            self::POSITION_THREE => self::POSITION_THREE,
            self::POSITION_FOUR => self::POSITION_FOUR,
            self::POSITION_FIVE => self::POSITION_FIVE,
            self::POSITION_SIX => self::POSITION_SIX,
            self::POSITION_SEVEN => self::POSITION_SEVEN,
            self::POSITION_EIGHT => self::POSITION_EIGHT,
            self::POSITION_NIGHN => self::POSITION_NIGHN,
            self::POSITION_TEN => self::POSITION_TEN,
        ];
    }

    public function getPositionName($param){
        $array = [
            self::POSITION_FOOTER => 'FOOTER',
            self::POSITION_ONE => self::POSITION_ONE,
            self::POSITION_TWO => self::POSITION_TWO,
            self::POSITION_THREE => self::POSITION_THREE,
            self::POSITION_FOUR => self::POSITION_FOUR,
            self::POSITION_FIVE => self::POSITION_FIVE,
            self::POSITION_SIX => self::POSITION_SIX,
            self::POSITION_SEVEN => self::POSITION_SEVEN,
            self::POSITION_EIGHT => self::POSITION_EIGHT,
            self::POSITION_NIGHN => self::POSITION_NIGHN,
            self::POSITION_TEN => self::POSITION_TEN,
        ];

        return $array[$param];
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['status' , 'page' , 'position'], 'required'],
            [['status', 'page' , 'position'], 'integer'],
            [['image' , 'link'], 'string', 'max' => 255],
            // ['title' , 'each' , 'rule' => ['string']],
            ['rasm' , 'file' , 'extensions' => 'jpg , gif , png , jpeg' , 'maxSize' => 1024*1024 , 'tooBig' => 'Limit is 1 MB']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'image' => 'Image',
            'status' => 'Status',
            'link' => "Link"
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBannerPagePositions()
    {
        return $this->hasMany(\common\models\BannerPagePosition::className(), ['banner_id' => 'id']);
    }
    public function getBannersTranslates()
    {
        return $this->hasMany(\common\models\BannersTranslate::className(), ['banner_id' => 'id']);
    }
    public function getBannersTranslate()
    {
        return $this->hasOne(\common\models\BannersTranslate::className(), ['banner_id' => 'id'])->andWhere(['lang_id' => \Yii::$app->languageId->id]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */

    public function beforeSave($insert)
    {
        
        if($this->rasm){
            if(file_exists(\Yii::getAlias('@uploads').'/banners/'.$this->image)){
                if($this->image != null){

                    unlink(\Yii::getAlias('@uploads').'/banners/'.$this->image);
                }
            }
            $filename = floor(microtime(true)*10000).'.'.$this->rasm->extension;
            $this->image = $filename;
            if($this->image){
                $this->rasm->saveAs(\Yii::getAlias('@uploads').'/banners/'.$this->image);
            }
        }


        return parent::beforeSave($insert);
    }

}
