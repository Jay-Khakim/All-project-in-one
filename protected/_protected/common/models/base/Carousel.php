<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use common\models\CarouselTranslate;
use common\models\Lang;
use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "carousel".
 *
 * @property integer $id
 * @property integer $status
 * @property integer $sort
 * @property string $image
 * @property integer $product_id
 * @property string $created_at
 *
 * @property \common\models\Product $product
 * @property \common\models\CarouselTranslate[] $carouselTranslates
 * @property string $aliasModel
 */
abstract class Carousel extends \yii\db\ActiveRecord
{


    public $rasm;
    public $title;


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'carousel';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'updatedAtAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['status', 'sort'], 'required'],
            [['status', 'sort', 'product_id'], 'integer'],
            [['image'], 'string', 'max' => 255],
            [['product_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Product::className(), 'targetAttribute' => ['product_id' => 'id']],
            ['title' , 'each' , 'rule' => ['string']],
            // ['title' , 'required'],

            ['rasm' , 'file' , 'extensions' => ['jpg' , 'png' , 'jpeg'] , 'maxSize' => 1024*1024, 'tooBig' => 'Limit is 1MB'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'status' => 'Status',
            'sort' => 'Sort',
            'image' => 'Image',
            'created_at' => 'Created At',
            'product_id' => 'Product',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProduct()
    {
        return $this->hasOne(\common\models\Product::className(), ['id' => 'product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCarouselTranslates()
    {
        return $this->hasMany(\common\models\CarouselTranslate::className(), ['carousel_id' => 'id']);
    }

    public function getCarouselTranslate()
    {
        return $this->hasOne(\common\models\CarouselTranslate::className(), ['carousel_id' => 'id'])->andWhere(['lang_id' => \Yii::$app->languageId->id]);
    }


    public function beforeSave($insert)
    {
        
        if($this->rasm){
            if(file_exists(\Yii::getAlias('@uploads').'/carousel/'.$this->image)){
                if($this->image != null){

                    unlink(\Yii::getAlias('@uploads').'/carousel/'.$this->image);
                }
            }
            $filename = floor(microtime(true)*10000).'.'.$this->rasm->extension;
            $this->image = $filename;
            if($this->image){
                $this->rasm->saveAs(\Yii::getAlias('@uploads').'/carousel/'.$this->image);
            }
        }


        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes)
    {
        $carousel = \common\models\Carousel::findOne($this->id);
        
        if($carousel && \Yii::$app->controller->action->id == 'create'){
            foreach(Lang::find()->all() as $lang){

                $translate = new CarouselTranslate([
                    'title' => $this->title[$lang->url],
                    'lang_id' => $lang->id,
                    'carousel_id' => $carousel->id
                ]);

                $translate->save();
            }

            
        }elseif($carousel && \Yii::$app->controller->action->id = 'update'){
            
            foreach(Lang::find()->all() as $language){
                $translate = CarouselTranslate::find()->where(['carousel_id' => $carousel->id])->andWhere(['lang_id' => $language->id])->one();
                if($translate){

                    $translate->title = $this->title[$language->url];
                    $translate->save();
                }else{
                    $newTranslate = new CarouselTranslate([
                        'title' => $this->title[$language->url],
                        'lang_id' => $language->id,
                        'carousel_id' => $carousel->id
                        ]);
                    $newTranslate->save();
                }
            }
        }
        return parent::afterSave($insert , $changedAttributes);
    }

}
