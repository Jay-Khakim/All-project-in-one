<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use common\models\CompanyIdentity;
use common\models\CompanyTranslate;
use common\models\Lang;
use nenad\passwordStrength\StrengthValidator;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\imagine\Image;

/**
 * This is the base-model class for table "company".
 *
 * @property integer $id
 * @property string $email
 * @property integer $status
 * @property integer $sort
 * @property string $image
 * @property integer $type
 * @property string $password_hash
 * @property string $auth_key
 * @property string $password_reset_token
 * @property string $account_activation_token
 * @property string $created_at
 *
 * @property \common\models\CompanyGallery[] $companyGalleries
 * @property \common\models\CompanyTranslate[] $companyTranslates
 * @property \common\models\Product[] $products
 * @property string $aliasModel
 */
abstract class Company extends CompanyIdentity
{

    public $password;

     const TYPE_LOCAL = 10;
     const TYPE_FOREIGN = 11;

    public $title;
    public $rasm;
    public $meta_description;
    public $description;
    public $meta_keywords;
    public $address;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'company';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'updatedAtAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['status', 'type', 'phone'], 'required'],
            [['status', 'sort', 'type'], 'integer'],
            [['email', 'image', 'website' , 'phone'], 'string', 'max' => 255],

            ['password', 'required', 'on' => 'create'],
            // use passwordStrengthRule() method to determine password strength
            $this->passwordStrengthRule(),
            ['email' , 'required'],
            ['email', 'unique', 'message' => 'This email address has already been taken.'],

            ['title' , 'each' , 'rule' => ['string']],
            ['title' , 'required'],
            // ['title' , function($attribute , $params , $validator){
            //     if(count(array_unique($this->$attribute)) !== count($this->$attribute)){
            //         $this->addError($attribute , "Title til bo'yicha bir xil bo'lmasligi kerak");
            //     }
            // }],

            [['meta_description'] , 'each' , 'rule' => ['string']],
            [['meta_description'] , 'required'],

            ['description' , 'each' , 'rule' => ['string']],
            ['description' , 'required'],

            ['address' , 'each' , 'rule' => ['string']],
            ['address' , 'required'],

            ['rasm' , 'image' , 'extensions' => 'jpg , png , jpeg' , 'maxWidth' => 500 , 'maxSize' => 1024*1024, 'tooBig' => 'Limit is 1MB'],
            ['meta_keywords' , 'each' , 'rule' => ['string']],
            ['meta_keywords' , 'required']
        ];
    }

    private function passwordStrengthRule()
    {
        // get setting value for 'Force Strong Password'
        $fsp = Yii::$app->params['fsp'];

        // password strength rule is determined by StrengthValidator
        // presets are located in: vendor/nenad/yii2-password-strength/presets.php
        $strong = [['password'], StrengthValidator::className(), 'preset'=>'normal'];

        // normal yii rule
        $normal = ['password', 'string', 'min' => 6];

        // if 'Force Strong Password' is set to 'true' use $strong rule, else use $normal rule
        return ($fsp) ? $strong : $normal;
    }

    public static function findByEmail($email)
    {
        return static::findOne(['email' => $email, 'status' => true]);
    } 

    /**
     * Finds user by password reset token.
     *
     * @param  string $token Password reset token.
     * @return null|static
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) 
        {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'status' => true,
        ]);
    }

    /**
     * Finds user by account activation token.
     *
     * @param  string $token Account activation token.
     * @return static|null
     */
    public static function findByAccountActivationToken($token)
    {
        return static::findOne([
            'account_activation_token' => $token,
            'status' => 0,
        ]);
    }

    /**
     * Checks to see if the given user exists in our database.
     * If LoginForm scenario is set to lwe (login with email), we need to check
     * user's email and password combo, otherwise we check username/password.
     * NOTE: used in LoginForm model.
     *
     * @param  string $username Can be either username or email based on scenario.
     * @param  string $password
     * @param  string $scenario
     * @return bool|static
     */
    public static function userExists($email, $password, $scenario)
    {
        // if scenario is 'lwe', we need to check email, otherwise we check username
        $field = ($scenario === 'lwe') ? 'email' : 'username';
        
        if ($user = static::findOne([$field => $email]))
        {
            if ($user->validatePassword($password))
            {
                return $user;
            }
            else
            {
                return false; // invalid password
            }            
        }
        else
        {
            return false; // invalid username|email
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'email' => 'Email',
            'status' => 'Status',
            'phone' => 'Phone',
            'website' => 'Website',
            'sort' => 'Sort',
            'image' => 'Image',
            'type' => 'Type',
            'created_at' => 'Created At',
        ];
    }


    public function getTypes(){
        return [
            self::TYPE_LOCAL => 'Local',
            self::TYPE_FOREIGN => 'Foreign'
        ];
    }
    
    public function getTypeName($type){
       $array = [
        self::TYPE_LOCAL => 'Local',
        self::TYPE_FOREIGN => 'Foreign'
       ];

       return $array[$type];
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCompanyGalleries()
    {
        return $this->hasMany(\common\models\CompanyGallery::className(), ['company_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCompanyTranslates()
    {
        return $this->hasMany(\common\models\CompanyTranslate::className(), ['company_id' => 'id']);
    }
    public function getCompanyTranslate()
    {
        return $this->hasOne(\common\models\CompanyTranslate::className(), ['company_id' => 'id'])->andWhere(['lang_id' => \Yii::$app->languageId->id]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProducts()
    {
        return $this->hasMany(\common\models\Product::className(), ['company_id' => 'id']);
    }

    public function beforeSave($insert)
    {
        $this->setPassword(123456);
        $this->generateAuthKey();
        if($this->rasm){
            if(file_exists(\Yii::getAlias('@uploads').'/company/'.$this->image)){
                if($this->image != null){

                    unlink(\Yii::getAlias('@uploads').'/company/'.$this->image);

                    if(file_exists(\Yii::getAlias('@uploads').'/company/thumb/'.$this->image))
                    unlink(\Yii::getAlias('@uploads').'/company/thumb/'.$this->image);
                }
            }
            $filename = floor(microtime(true)*10000).'.'.$this->rasm->extension;
            $this->image = $filename;
            if($this->image){
                $this->rasm->saveAs(\Yii::getAlias('@uploads').'/company/'.$this->image);

                Image::thumbnail(\Yii::getAlias('@uploads').'/company/'.$this->image, 250, 200)
                ->save(\Yii::getAlias('@uploads').'/company/thumb/'.$this->image, ['quality' => 100]);
            }
        }


        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes)
    {
        $company = \common\models\Company::findOne($this->id);
        
        if($company && Yii::$app->controller->action->id == 'create'){
            foreach(Lang::find()->all() as $lang){

                $translate = new CompanyTranslate([
                    'title' => $this->title[$lang->url],
                    'address' => $this->address[$lang->url],
                    'meta_description' => $this->meta_description[$lang->url],
                    'description' => $this->description[$lang->url],
                    'url' => toAscii($this->title[$lang->url]),
                    'meta_title' => $this->title[$lang->url],
                    'meta_keywords' => $this->meta_keywords[$lang->url],
                    'lang_id' => $lang->id,
                    'company_id' => $company->id
                ]);

                $translate->save();
            }

            
        }elseif($company && \Yii::$app->controller->action->id = 'update'){
            
            foreach(Lang::find()->all() as $language){
                $translate = CompanyTranslate::find()->where(['company_id' => $company->id])->andWhere(['lang_id' => $language->id])->one();
                if($translate){

                    $translate->title = $this->title[$language->url];
                    $translate->address = $this->address[$language->url];
                    $translate->meta_description = $this->meta_description[$language->url];
                    $translate->description = $this->description[$language->url];
                    $translate->url = toAscii($this->title[$language->url]);
                    $translate->meta_title = $this->title[$language->url];
                    $translate->meta_keywords = $this->meta_keywords[$language->url];
                    $translate->save();
                }else{
                    $newTranslate = new CompanyTranslate([
                        'title' => $this->title[$language->url],
                        'address' => $this->address[$language->url],
                        'meta_description' => $this->meta_description[$language->url],
                        'description' => $this->description[$language->url],
                        'url' => toAscii($this->title[$language->url]),
                        'meta_title' => $this->title[$language->url],
                        'meta_keywords' => $this->meta_keywords[$language->url],
                        'lang_id' => $language->id,
                        'company_id' => $company->id
                        ]);
                    $newTranslate->save();
                }
            }
        }
        return parent::afterSave($insert , $changedAttributes);
    }


}
