<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use common\models\Lang;
use common\models\SubCategoryTranslate;
use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "sub_category".
 *
 * @property integer $id
 * @property integer $status
 * @property integer $sort
 * @property string $image
 * @property integer $category_id
 * @property string $created_at
 *
 * @property \common\models\Product[] $products
 * @property \common\models\Category $category
 * @property \common\models\SubCategoryTranslate[] $subCategoryTranslates
 * @property string $aliasModel
 */
abstract class SubCategory extends \yii\db\ActiveRecord
{

    public $title;
    public $meta_keywords;

    public  $rasm;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'sub_category';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'updatedAtAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['status', 'category_id'], 'required'],
            [['status', 'sort', 'category_id'], 'integer'],
            [['image'], 'string', 'max' => 255],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Category::className(), 'targetAttribute' => ['category_id' => 'id']],

            ['title' , 'each' , 'rule' => ['string']],
            ['title' , 'required'],
            ['rasm' , 'image' , 'extensions' => 'jpg , png , jpeg' , 'maxSize' => 512000, 'maxWidth' => 100 , 'maxHeight' => 100 ,'message' => "rasm o'lchami ko'pi bilan 100x100 bo'lishi kerak." , 'tooBig' => 'Limit is 500KB'],
            ['meta_keywords' , 'each' , 'rule' => ['string']],
            ['meta_keywords' , 'required']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'status' => 'Status',
            'sort' => 'Sort',
            'image' => 'Image',
            'created_at' => 'Created At',
            'category_id' => 'Category',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProducts()
    {
        return $this->hasMany(\common\models\Product::className(), ['sub_category_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(\common\models\Category::className(), ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSubCategoryTranslates()
    {
        return $this->hasMany(\common\models\SubCategoryTranslate::className(), ['sub_category_id' => 'id']);
    }
    public function getSubCategoryTranslate()
    {
        return $this->hasOne(\common\models\SubCategoryTranslate::className(), ['sub_category_id' => 'id'])->andWhere(['lang_id' => \Yii::$app->languageId->id]);
    }

    public function beforeSave($insert)
    {
        if($this->rasm){
            if(file_exists(\Yii::getAlias('@uploads').'/category/'.$this->image)){
                if($this->image != null){

                    unlink(\Yii::getAlias('@uploads').'/category/'.$this->image);
                }
            }
            $filename = floor(microtime(true)*10000).'.'.$this->rasm->extension;
            $this->image = $filename;
            if($this->image){
                $this->rasm->saveAs(\Yii::getAlias('@uploads').'/category/'.$this->image);
            }
        }


        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes)
    {
        $category = \common\models\SubCategory::findOne($this->id);
        
        if($category && \Yii::$app->controller->action->id == 'create'){
            foreach(Lang::find()->all() as $lang){

                $translate = new SubCategoryTranslate([
                    'title' => $this->title[$lang->url],
                    'url' => toAscii($this->title[$lang->url]),
                    'meta_title' => $this->title[$lang->url],
                    'meta_keywords' => $this->meta_keywords[$lang->url],
                    'lang_id' => $lang->id,
                    'sub_category_id' => $this->id
                ]);

                $translate->save();
            }

            
        }elseif($category && \Yii::$app->controller->action->id = 'update'){
            
            foreach(Lang::find()->all() as $language){
                $translate = \common\models\SubCategoryTranslate::find()->where(['sub_category_id' => $category->id])->andWhere(['lang_id' => $language->id])->one();
                if($translate){

                    $translate->title = $this->title[$language->url];
                    $translate->url = toAscii($this->title[$language->url]);
                    $translate->meta_title = $this->title[$language->url];
                    $translate->meta_keywords = $this->meta_keywords[$language->url];
                    $translate->save();
                }else{
                    $newTranslate = new \common\models\SubCategoryTranslate([
                        'title' => $this->title[$language->url],
                        'url' => toAscii($this->title[$language->url]),
                        'meta_title' => $this->title[$language->url],
                        'meta_keywords' => $this->meta_keywords[$language->url],
                        'lang_id' => $language->id,
                        'sub_category_id' => $category->id
                        ]);
                    $newTranslate->save();
                }
            }
        }
        return parent::afterSave($insert , $changedAttributes);
    }


}
